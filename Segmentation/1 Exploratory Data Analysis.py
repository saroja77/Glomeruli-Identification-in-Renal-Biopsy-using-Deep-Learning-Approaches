# -*- coding: utf-8 -*-
"""Copy of EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H9KwDbe_xhVihUG0-RaCtm4OK04Ph3vu
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install imagecodecs

import cv2
import datetime
import gc
import glob
import math
import matplotlib.pyplot as plt
import numpy as np
import os
import pandas as pd
import skimage.morphology
import sys
import imagecodecs
import json
import tifffile as tiff
from matplotlib import colors
from matplotlib import pyplot as plt
from matplotlib.lines import Line2D
from matplotlib_venn import venn2_unweighted

plot_full_image = True

# Number of glomeruli to display for each image
num_glom_display = 5

# Number of glomberuli to save as tiff files.
num_glom_save = 5

glob_scale = 0.25
base_path = '/content/drive/MyDrive/kidneysegmentation/'
#Directory Contents
print("Directory Contents")
print('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%' )
print('\n'.join(os.listdir(base_path)))
print('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%' )
train_images = sorted(glob.glob(os.path.join(base_path, 'train/*.tiff')))
print(f'Number of training images: {len(train_images)}')
print('\n'.join(train_images))
print('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%' )

#Test Images
test_images = sorted(glob.glob(os.path.join(base_path, 'test/*.tiff')))
print(f'Number of test images: {len(test_images)}')
print('\n'.join(test_images))

df_train = pd.read_csv(os.path.join(base_path, 'train.csv'))
df_info = pd.read_csv(os.path.join(base_path,'HuBMAP-20-dataset_information.csv'))

import cv2
import glob
import json
import numpy as np
import os
import pandas as pd
import tifffile as tiff
from matplotlib import colors
from matplotlib import pyplot as plt
from matplotlib.lines import Line2D
from matplotlib_venn import venn2_unweighted

train_images = list(map(lambda x: os.path.basename(x), train_images))
test_images = list(map(lambda x: os.path.basename(x), test_images))

pd.set_option('display.max_colwidth', None)
dataset_information = pd.read_csv(base_path + 'HuBMAP-20-dataset_information.csv')
dataset_information['pixels_total'] = dataset_information.width_pixels * dataset_information.height_pixels

train_dataset_information = dataset_information[dataset_information['image_file'].isin(train_images)].reset_index(drop=True)
test_dataset_information = dataset_information[dataset_information['image_file'].isin(test_images)].reset_index(drop=True)

"""## Training Dataset

*Image resolution table and bar chart representation*
"""

train_dataset_information.sort_values('pixels_total', ascending=False)[['image_file', 'width_pixels','height_pixels']].reset_index(drop=True)

train_dataset_information.plot.bar(x='image_file', y='pixels_total', rot=90)

"""*RGB and HSV color spaces of aaa6a05cc.tiff*"""

# open and resize image
image = cv2.imread(base_path + 'train/aaa6a05cc.tiff')
image_resize = cv2.resize(image,(image.shape[1]//10,image.shape[0]//10), interpolation = cv2.INTER_CUBIC)

# calculate colors
pixel_colors = image_resize.reshape((np.shape(image_resize)[0]*np.shape(image_resize)[1], 3))
norm = colors.Normalize(vmin=-1.,vmax=1.)
norm.autoscale(pixel_colors)
pixel_colors = norm(pixel_colors).tolist()

# split channels
b, g, r = cv2.split(image_resize)

# scatter plot
fig = plt.figure()
axis = fig.add_subplot(1, 1, 1, projection='3d')
axis.scatter(r.flatten(), g.flatten(), b.flatten(), facecolors=pixel_colors, marker='.')
axis.set_xlabel('Red')
axis.set_ylabel('Green')
axis.set_zlabel('Blue')
plt.show()

# convert to hsv
hsv_image = cv2.cvtColor(image_resize, cv2.COLOR_BGR2HSV)
h, s, v = cv2.split(hsv_image)

# scatter plot
fig = plt.figure()
axis = fig.add_subplot(1, 1, 1, projection='3d')
axis.scatter(s.flatten(), h.flatten(), v.flatten(), facecolors=pixel_colors, marker='.')
axis.set_xlabel('Saturation')
axis.set_ylabel('Hue')
axis.set_zlabel('Value')
plt.show()

"""*Glomeruli Count*"""

train_glom_seg_files = train_dataset_information['glomerulus_segmentation_file'].to_list()
train_glomeruli_dict = {}

for file_name in train_glom_seg_files:
    file_id = file_name[:9]
    with open(f'/content/drive/MyDrive/kidneysegmentation/train/{file_name}') as json_file:
        data = json.load(json_file)
        train_glomeruli_dict[file_id] = 0
        for entry in data:
            if entry['type'] == 'Feature' and entry['properties']['classification']['name'] == 'glomerulus':
                    train_glomeruli_dict[file_id] += 1
            else:
                raise Exception(f"Unexpected json format: {entry['type']}, {entry['properties']['classification']['name']}")

train_nr_glom = pd.DataFrame(list(train_glomeruli_dict.items()), columns=['file_id', 'nr_glomeruli'])
train_nr_glom.sort_values('nr_glomeruli', ascending=False).reset_index(drop=True)

#total count
train_nr_glom['nr_glomeruli'].sum()

"""*Glomeruli Size Distribution*"""

train_glom_seg_files = train_dataset_information['glomerulus_segmentation_file'].to_list()
train_glomeruli_polys_dict = {}

for file_name in train_glom_seg_files:
    with open(f'/content/drive/MyDrive/kidneysegmentation/train/{file_name}') as json_file:
        data = json.load(json_file)
        train_glomeruli_polys_dict[file_name] = []
        for entry in data:
            if entry['type'] == 'Feature' and entry['properties']['classification']['name'] == 'glomerulus':
                geom = np.array(entry['geometry']['coordinates']).astype(np.float32)
                x,y,w,h = cv2.boundingRect(geom.squeeze(axis=0))
                train_glomeruli_polys_dict[file_name].append((h,w)) # height, width!
            else:
                raise Exception(f"Unexpected json format: {entry['type']}, {entry['properties']['classification']['name']}")

train_res_glom = pd.DataFrame(list(train_glomeruli_polys_dict.items()), columns=['glomerulus_segmentation_file', 'glomeruli_height_width'])
train_res_glom = train_res_glom.explode('glomeruli_height_width')
train_res_glom['height'], train_res_glom['width'] = zip(*train_res_glom['glomeruli_height_width'])
train_res_glom = train_res_glom.drop(columns=['glomeruli_height_width'])
train_res_glom.describe()

"""*Anatomical Structure*"""

def list_structures(seg_files, folder):
    train_anatomical_dict = {}
    folder_path = os.path.join(base_path, folder)

    for file_name in seg_files:
        file_id = file_name[:9]
        with open(os.path.join(folder_path, file_name)) as json_file:
            data = json.load(json_file)
            train_anatomical_dict[file_id] = []
            for entry in data:
                if entry['type'] == 'Feature':
                    train_anatomical_dict[file_id].append(entry['properties']['classification']['name'])
                else:
                    raise Exception(f"Unexpected json format: {entry['type']}, {entry['properties']['classification']['name']}")

    return pd.DataFrame(list(train_anatomical_dict.items()), columns=['file_id', 'anatomical_structure'])

train_anatomical_seg_files = train_dataset_information['anatomical_structures_segmention_file'].to_list()
train_anatomical = list_structures(train_anatomical_seg_files, 'train')
train_anatomical

#listing all unique anatomical structures
pd.DataFrame(train_anatomical.explode('anatomical_structure')['anatomical_structure'].unique(), columns=['unique_structures'])

"""*Mask Visualization*"""

def make_grid(shape, window=256, min_overlap=32):
    """
    function to generate a grid layout for sliding window
    :param shape: height and width of the image
    :param window: size of the window
    :param min_overlap: minimal window overlap
    :return: array of window coordinates (x1,x2,y1,y2)
    """
    x, y = shape
    nx = x // (window - min_overlap) + 1
    x1 = np.linspace(0, x, num=nx, endpoint=False, dtype=np.int64)
    x1[-1] = x - window
    x2 = (x1 + window).clip(0, x)
    ny = y // (window - min_overlap) + 1
    y1 = np.linspace(0, y, num=ny, endpoint=False, dtype=np.int64)
    y1[-1] = y - window
    y2 = (y1 + window).clip(0, y)
    slices = np.zeros((nx,ny, 4), dtype=np.int64)

    for i in range(nx):
        for j in range(ny):
            slices[i,j] = x1[i], x2[i], y1[j], y2[j]
    return slices.reshape(nx*ny,4)

def plot_masks(dataset_information, folder, frame_size, frame_overlap, plot_glom):
    folder_path = os.path.join(base_path, folder)

    for i in range(len(dataset_information)):

        # create new figure
        plt.figure(figsize=(32, 30))
        obj_line_thickness = 60

        # find metadata row for json file
        image_metadata = dataset_information.iloc[i]

        # open image file
        image = tiff.imread(os.path.join(folder_path, image_metadata['image_file']))
        print(image_metadata['image_file'])

        # reshape image if necessary
        if len(image.shape) == 5:
            image = image.squeeze()
        if image.shape[0] == 3:
            image = image.transpose(1, 2, 0)

        # create a copy of the image
        image = image.copy()

        # draw sliding window boxes
        frame_grid = make_grid((image.shape[1], image.shape[0]), frame_size, frame_overlap)

        for frame in frame_grid:
            x1, y1 = frame[0], frame[2]
            x2, y2 = frame[1], frame[3]
            image = cv2.rectangle(image, (x1, y1), (x2, y2), color=(255,255,255), thickness=16)

        # draw glomeruli polygons
        if plot_glom:
            # open glomeruli json file
            read_glom_seg_file = open(os.path.join(folder_path, image_metadata['glomerulus_segmentation_file']), 'r')
            glom_seg_data = json.load(read_glom_seg_file)

            for k in range(len(glom_seg_data)):
                glom_poly = np.array(glom_seg_data[k]['geometry']['coordinates']).astype(np.int32) # get coordinates of glomeruli
                cv2.polylines(image, glom_poly, True,(255,0,0), thickness=obj_line_thickness)

        # open anatomical json file
        read_anatomical_seg_file = open(os.path.join(folder_path, image_metadata['anatomical_structures_segmention_file']), 'r')
        anatomical_seg_data = json.load(read_anatomical_seg_file)

        # scan anatomical json file and draw lines
        for n in range(len(anatomical_seg_data)):
            obj_name = anatomical_seg_data[n]['properties']['classification']['name']
            obj_coords = anatomical_seg_data[n]['geometry']['coordinates']

            if (obj_name == 'Cortex'): # draw line around cortex
                cv2.polylines(image, np.expand_dims(np.array(obj_coords[0]).astype(np.int32), axis=0), True, (0,0,255), thickness=obj_line_thickness)
            elif (obj_name == 'Medulla'): # draw line around medulla
                cv2.polylines(image, np.array(obj_coords).astype(np.int32), True, (0,255,0), thickness=obj_line_thickness)
            elif (obj_name == 'Inner medulla'): # draw line around inner medulla
                cv2.polylines(image, np.array(obj_coords).astype(np.int32), True, (255,255,0), thickness=obj_line_thickness)
            elif (obj_name == 'Outer Medulla'): # draw line around outer medulla
                cv2.polylines(image, np.array(obj_coords).astype(np.int32), True, (0,255,255), thickness=obj_line_thickness)
            elif (obj_name == 'Outer Stripe'): # draw line around outer stripe
                cv2.polylines(image, np.array(obj_coords).astype(np.int32), True, (255,0,255), thickness=obj_line_thickness)
            else:
                raise Exception(f'Unknown anatomical object: {obj_name}')

        # down-scale the image
        image_resize = cv2.resize(image,(image.shape[1]//10,image.shape[0]//10), interpolation = cv2.INTER_CUBIC)

        # add legend and view the image
        custom_lines = [Line2D([0], [0], color=(0.,0.,1.), lw=4),
                    Line2D([0], [0], color=(0.,1.,0.), lw=4),
                    Line2D([0], [0], color=(1.,1.,0.), lw=4),
                    Line2D([0], [0], color=(0.,1.,1.), lw=4),
                    Line2D([0], [0], color=(1.,0.,1.), lw=4),]

        op_file = "output_" + image_metadata['image_file'] + ".tiff"
        plt.legend(custom_lines, ['Cortex', 'Medulla', 'Inner medulla', 'Outer Medulla', 'Outer Stripe'])
        plt.axis('off')
        plt.title(image_metadata['image_file'])
        plt.imshow(image_resize)
        plt.show()
        plt.savefig(op_file)

plot_masks(train_dataset_information, 'train', 1024, 256, True)

"""## Test Data

*Image Resolution*
"""

test_dataset_information.sort_values('pixels_total', ascending=False)[['image_file', 'width_pixels','height_pixels']]

test_dataset_information.plot.bar(x='image_file', y='pixels_total')

"""*Anatomical Structure*"""

test_anatomical_seg_files = test_dataset_information['anatomical_structures_segmention_file'].to_list()
test_anatomical = list_structures(test_anatomical_seg_files, 'test')

pd.DataFrame(test_anatomical.explode('anatomical_structure')['anatomical_structure'].unique(), columns=['unique_structures'])

"""*Mask Visualization*"""

plot_masks(test_dataset_information, 'test', 1024, 256, False)